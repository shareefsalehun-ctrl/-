
import { GoogleGenAI, Modality } from '@google/genai';

// Helper function to convert a File object to a base64 string
const fileToBase64 = (file: File): Promise<{ base64: string; mimeType: string }> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => {
      const result = reader.result as string;
      const [header, base64] = result.split(',');
      if (!header || !base64) {
        return reject(new Error("Invalid file format for base64 conversion."));
      }
      const mimeType = header.match(/:(.*?);/)?.[1] ?? 'application/octet-stream';
      resolve({ base64, mimeType });
    };
    reader.onerror = (error) => reject(error);
  });
};


const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

const VIRTUAL_TRY_ON_PROMPT = `As a world-class virtual fashion AI, your task is to generate a photorealistic, high-resolution image of the person from the first image wearing the dress from the second image.

Follow these critical instructions:
1.  **Identity Preservation**: The person's original body shape, proportions, skin tone, and facial identity must remain completely unchanged.
2.  **Realistic Fit**: The dress must be realistically adapted to the person's pose and body. Ensure natural fabric flow, draping, shadows, and lighting that are consistent with the model's environment.
3.  **Detail Fidelity**: Preserve every detail of the dress, including its texture, embroidery, patterns, transparency, and specific design elements.
4.  **High Quality**: The final output must be a professional, high-definition (at least 1024x1024 pixels) photorealistic image suitable for a luxury fashion brand's website.
5.  **Clean Background**: The background of the final image must be clean and plain white.
6.  **Upscaling**: If either of the input images is of low quality, automatically enhance and upscale them before processing to achieve the best possible result.
7.  **Final Output**: Produce a single, combined image. Do not return text, only the final image.`;

export const generateTryOnImage = async (
  modelImageFile: File,
  dressImageFile: File
): Promise<string> => {
  try {
    const [modelImage, dressImage] = await Promise.all([
      fileToBase64(modelImageFile),
      fileToBase64(dressImageFile),
    ]);

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image-preview',
      contents: {
        parts: [
          { inlineData: { data: modelImage.base64, mimeType: modelImage.mimeType } },
          { inlineData: { data: dressImage.base64, mimeType: dressImage.mimeType } },
          { text: VIRTUAL_TRY_ON_PROMPT },
        ],
      },
      config: {
        responseModalities: [Modality.IMAGE, Modality.TEXT],
      },
    });

    if (!response.candidates || response.candidates.length === 0) {
      throw new Error('The AI model did not return a valid response.');
    }

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData && part.inlineData.mimeType.startsWith('image/')) {
        return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
      }
    }

    // Check for text response which might contain an error or explanation
    const textResponse = response.text;
    if (textResponse) {
        throw new Error(`AI processing failed: ${textResponse}`);
    }

    throw new Error('No image was generated by the AI.');
  } catch (error) {
    console.error('Error in generateTryOnImage:', error);
    const errorMessage = error instanceof Error ? error.message : 'An unknown error occurred.';
    // Provide a more user-friendly error
    if (errorMessage.includes('429') || errorMessage.includes('quota')) {
        throw new Error('The service is currently busy. Please try again in a few moments.');
    }
    throw new Error(`Failed to generate virtual try-on image. ${errorMessage}`);
  }
};
